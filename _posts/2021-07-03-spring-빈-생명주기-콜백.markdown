---
layout: post
title:  "빈 생명주기 콜백"
subtitle:   "빈 생명주기 콜백"
date:   2021-07-03 20:07:27 +0900
categories: spring
tags: spring java springboot beanlifecycle
comments: true
---

# 빈 생명주기 콜백
<br>

- 목차
	- [문제상황](#문제상황)
	- [스프링 빈의 라이프 사이클](#스프링-빈의-라이프-사이클) 
	- [스프링에서 지원하는 다양한 생명주기 콜백](#스프링에서-지원하는-다양한-생명주기-콜백) 
	- [인터페이스(InitializingBean, DisposableBean)](#인터페이스initializingbean-disposablebean) 
	    - [초기화, 소멸 인터페이스 단점](#초기화-소멸-인터페이스-단점) 
	- [설정 정보에 초기화 메서드, 종료 메서드 지정](#설정-정보에-초기화-메서드-종료-메서드-지정) 
	    - [설정 정보 사용 특징](#설정-정보-사용-특징) 
	    - [종료 메서드 추론](#종료-메서드-추론) 
	- [애노테이션 @PostConstruct, @PreDestory](#애노테이션-postconstruct-predestory) 
	    - [@PostConstruct, @PreDestory 애노테이션 특징](#postconstruct-predestory-애노테이션-특징) 
	- [정리](#정리) 
<br>

## 문제상황
```java
public class NetworkClient {

    private String url;

    public NetworkClient() {
        System.out.println("생성자 호출, url = " + url);
        connect();
        call("초기화 연결 메세지");
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void connect() {
        System.out.println("connect : " + url);
    }

    public void call(String message) {
        System.out.println("call : " + url + " message : " + message);
    }

    public void disconnect() {
        System.out.println("close : " + url);
    }
}
```

위와 같은 NetworkClient를 아래의 테스트코드를 실행시킨다면?

```java
public class BeanLifeCycleTest {

    @Test
    public void lifeCycleTest() {
        ConfigurableApplicationContext ac = new AnnotationConfigApplicationContext(LifeCycleConfig.class);
        NetworkClient networkClient = ac.getBean(NetworkClient.class);

        ac.close();
    }

    @Configuration
    static class LifeCycleConfig {
        
        @Bean
        public NetworkClient networkClient() {
            NetworkClient networkClient = new NetworkClient();
            networkClient.setUrl("http:hello-spring.dev");
            return networkClient;
        }
    }
}
```
```
생성자 호출, url = null
connect: null
call: null message = 초기화 연결 메시지
```
위와같은 결과가 나올것이다. 왜냐하면 Bean으로 등록되면서 생성자를 호출하였으나 url에는 null값이 들어있기 때문이다. 이후에 setUrl를 호출하지만 이미 생성자에서 connect를 해버렸기 때문에 위와같은 결과가 나오게 된다.
<br><br>

## 스프링 빈의 라이프 사이클
<br>
스프링 컨테이너 생성 -> 스프링 빈 생성 의존관계 주입 -> 초기화 콜백 사용 -> 소멸전 콜백 스프링 -> 종료

> **초기화 콜백** : 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출<br>
> **소멸전 콜백** : 빈이 소멸되기 직전에 호출<br>

> **참고: 객체의 생성과 초기화를 분리하자.**<br>
> 생성자는 필수 정보(파라미터)를 받고, 메모리를 할당해서 객체를 생성하는 책임을 가진다. 반면에 초기화는 이렇게 생성된 값들을 활용해서 외부 커넥션을 연결하는등 무거운 동작을 수행한다.
> 따라서 생성자 안에서 무거운 초기화 작업을 함께 하는 것 보다는 객체를 생성하는 부분과 초기화 하는 부분을 명확하게 나누는 것이 유지보수 관점에서 좋다. 물론 초기화 작업이 내부 값들만 약간 변경하는 정도로 단순한 경우에는 생성자에서 한번에 다 처리하는게 더 나을 수 있다

<br><br>

## 스프링에서 지원하는 다양한 생명주기 콜백
- 인터페이스(InitializingBean, DisposableBean)
- 설정 정보에 초기화 메서드, 종료 메서드 지정
- @PostConstruct, @PreDestory 애노테이션 지원
<br><br><br>

## 인터페이스(InitializingBean, DisposableBean)

```java
public class NetworkClientInterface implements InitializingBean, DisposableBean {

    private String url;

    public NetworkClientInterface() {
        System.out.println("생성자 호출, url = " + url);
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void connect() {
        System.out.println("connect : " + url);
    }

    public void call(String message) {
        System.out.println("call : " + url + " message : " + message);
    }

    public void disconnect() {
        System.out.println("close : " + url);
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println("NetworkClient.afterPropertiesSet");
        connect();
        call("초기화 연결 메세지");
    }

    @Override
    public void destroy() throws Exception {
        System.out.println("NetworkClient.destroy");
        disconnect();
    }
}
```
InitializingBean, DisposableBean를 implements하게 되면 afterPropertiesSet,destroy 두개의 메소드를 Override 해야한다. 각각 빈 의존관계 주입이 완료된 후 호출, 빈 소멸되기 직전에 호출된다.<br><br>

### 초기화, 소멸 인터페이스 단점
<br>
이 인터페이스는 스프링 전용 인터페이스다. 해당 코드가 스프링 전용 인터페이스에 의존한다. 초기화, 소멸 메서드의 이름을 변경할 수 없다. 내가 코드를 고칠 수 없는 외부 라이브러리에 적용할 수 없다.
<br><br>

> 참고: 인터페이스를 사용하는 초기화, 종료 방법은 스프링 초창기에 나온 방법들이고, 지금은 다음의 더 나은 방법들이 있어서 거의 사용하지 않는다.

<br><br><br>

## 설정 정보에 초기화 메서드, 종료 메서드 지정
설정 정보에 @Bean(initMethod = "init", destroyMethod = "close") 처럼 초기화, 소멸 메서드를
지정할 수 있다.
```java
public class NetworkClientBean {

    private String url;

    public NetworkClientBean() {
        System.out.println("생성자 호출, url = " + url);
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void connect() {
        System.out.println("connect : " + url);
    }

    public void call(String message) {
        System.out.println("call : " + url + " message : " + message);
    }

    public void disconnect() {
        System.out.println("close : " + url);
    }

    public void init() {
        System.out.println("NetworkClient.init");
        connect();
        call("초기화 연결 메세지");
    }

    public void close() {
        System.out.println("NetworkClient.close");
        disconnect();
    }
}
```
```java
public class BeanLifeCycleTest {

    @Test
    public void lifeCycleTest() {
        ConfigurableApplicationContext ac = new AnnotationConfigApplicationContext(LifeCycleConfig.class);
        NetworkClient networkClient = ac.getBean(NetworkClient.class);

        ac.close();
    }

    @Configuration
    static class LifeCycleConfig {
        @Bean(initMethod = "init", destroyMethod = "close")
        public NetworkClient networkClient() {
            NetworkClient networkClient = new NetworkClient();
            networkClient.setUrl("http:hello-spring.dev");
            return networkClient;
        }
    }
}
```
위의 테스트 코드에서 **@Bean(initMethod = "init", destroyMethod = "close")** 부분을 주목해서 보자. initMethod = "init" 은 초기화 콜백, 빈이 생성되고 빈의 의존관계 주입이 완료된 후 호출할 메서드 명을 적으면 해당 메서드가 호출이 된다. 또, destroyMethod = "close" 는 소멸전 콜백, 빈이 소멸되기 직전에 호출할 메서드 명을 적으면 해당 메서드가 호출이 된다.<br><br>

### 설정 정보 사용 특징
1. 메서드 이름을 자유롭게 줄 수 있다.
2. 스프링 빈이 스프링 코드에 의존하지 않는다.
3. 코드가 아니라 설정 정보를 사용하기 때문에 코드를 고칠 수 없는 외부 라이브러리에도 초기화, 종료 메서드 를 적용할 수 있다.

### 종료 메서드 추론
- @Bean의 destroyMethod 속성에는 아주 특별한 기능이 있다.
- 라이브러리는 대부분 close , shutdown 이라는 이름의 종료 메서드를 사용한다. 
- @Bean의 destroyMethod 는 기본값이 아래와 같이 (inferred) (추론)으로 등록되어 있다.
```java
String destroyMethod() default AbstractBeanDefinition.INFER_METHOD;
```
- 이 추론 기능은 close , shutdown 라는 이름의 메서드를 자동으로 호출해준다. 이름 그대로 종료 메서드 를 추론해서 호출해준다.
- 따라서 직접 스프링 빈으로 등록하면 종료 메서드는 따로 적어주지 않아도 잘 동작한다.
- 추론 기능을 사용하기 싫으면 destroyMethod="" 처럼 빈 공백을 지정하면 된다.<br><br><br>

## 애노테이션 @PostConstruct, @PreDestory
```java
public class NetworkClient {

    private String url;

    public NetworkClient() {
        System.out.println("생성자 호출, url = " + url);
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void connect() {
        System.out.println("connect : " + url);
    }

    public void call(String message) {
        System.out.println("call : " + url + " message : " + message);
    }

    public void disconnect() {
        System.out.println("close : " + url);
    }

    @PostConstruct
    public void init() {
        System.out.println("NetworkClient.init");
        connect();
        call("초기화 연결 메세지");
    }

    @PreDestroy
    public void close() {
        System.out.println("NetworkClient.close");
        disconnect();
    }
}
```
PostConstruct , @PreDestroy 이 두 애노테이션을 사용하면 가장 편리하게 초기화와 종료를 실행할 수 있다.<br><br>

### @PostConstruct, @PreDestory 애노테이션 특징
- 최신 스프링에서 가장 권장하는 방법이다.
- 애노테이션 하나만 붙이면 되므로 매우 편리하다.
- 패키지를 잘 보면 javax.annotation.PostConstruct 이다. 스프링에 종속적인 기술이 아니라 JSR-250 라는 자바 표준이다. 따라서 스프링이 아닌 다른 컨테이너에서도 동작한다.
- 컴포넌트 스캔과 잘 어울린다.
- 유일한 단점은 외부 라이브러리에는 적용하지 못한다는 것이다. 외부 라이브러리를 초기화, 종료 해야 하면 @Bean의 기능을 사용하자.<br><br>

## 정리
- @PostConstruct, @PreDestory 애노테이션을 사용하자
- 코드를 고칠 수 없는 외부 라이브러리를 초기화, 종료해야 하면 @Bean 의 initMethod , destroyMethod를 사용하자.

<br><br><br>
## References

> __김영한의 스프링 핵심 원리 - 기본편__